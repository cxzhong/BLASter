name: Build and Publish Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggers
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.21.3
    
    - name: Build wheels
      env:
        CIBW_BUILD: cp310-* cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-musllinux_*"  # Skip musl Linux for now due to potential build issues
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: AMD64
        # Install build dependencies
        CIBW_BEFORE_BUILD: pip install setuptools wheel Cython numpy
        # Test the wheels
        CIBW_TEST_REQUIRES: numpy
        CIBW_TEST_COMMAND: python -c "import blaster; import numpy as np; result = blaster.lll_reduce(np.array([[1,2],[2,3]]), verbose=False); print(f'Wheel test passed: RHF={result.rhf:.6f}')"
        # Environment variables for builds
        CIBW_ENVIRONMENT_LINUX: CC=gcc CXX=g++
        CIBW_ENVIRONMENT_MACOS: CC=clang CXX=clang++
      run: python -m cibuildwheel --output-dir wheelhouse
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
        retention-days: 30

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build
    
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 30

  test-release:
    name: Test Release Artifacts
    needs: [build-wheels, build-sdist]
    runs-on: ${{ matrix.test-os }}
    
    strategy:
      matrix:
        test-os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - test-os: ubuntu-latest
            wheel-pattern: "wheels-ubuntu-latest/*.whl"
          - test-os: macos-latest  
            wheel-pattern: "wheels-macos-latest/*.whl"
          - test-os: windows-latest
            wheel-pattern: "wheels-windows-latest/*.whl"
    
    steps:
    - name: Download platform-specific wheel artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels-${{ matrix.test-os }}
        path: wheels-${{ matrix.test-os }}/
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: source-distribution/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Debug available artifacts
      shell: bash
      run: |
        echo "=== DEBUG: All downloaded artifacts ==="
        find . -type f -name "*.whl" -o -name "*.tar.gz" | sort
        echo ""
        echo "=== Directory structure ==="
        ls -la
        echo ""
        echo "=== Wheels directory for ${{ matrix.test-os }} ==="
        ls -la wheels-${{ matrix.test-os }}/ 2>/dev/null || echo "wheels-${{ matrix.test-os }}/ directory not found"
    
    - name: Test wheel installation  
      shell: bash
      run: |
        echo "Available wheels in wheels-${{ matrix.test-os }}/:"
        ls -la wheels-${{ matrix.test-os }}/*.whl
        
        echo "Python version info:"
        python --version
        pip --version
        
        # Create a temporary directory and copy wheels there
        mkdir temp_wheels
        cp wheels-${{ matrix.test-os }}/*.whl temp_wheels/
        
        echo "Testing wheel installation by letting pip choose the compatible wheel..."
        # Use pip install with --find-links to let pip select the right wheel
        pip install --no-index --find-links temp_wheels/ blaster
        
        echo "Testing the installed package..."
        python -c "
        import blaster
        import numpy as np
        basis = np.array([[10, 2], [3, 7]])
        result = blaster.lll_reduce(basis, verbose=False)
        print(f'[OK] Wheel installation test passed on ${{ matrix.test-os }}: RHF = {result.rhf:.6f}')
        "
        
        pip uninstall -y blaster
        rm -rf temp_wheels
    
    - name: Test source distribution installation
      # Only test source distribution on one platform to avoid redundancy
      if: matrix.test-os == 'ubuntu-latest'
      shell: bash
      run: |
        pip install source-distribution/*.tar.gz
        python -c "
        import blaster
        import numpy as np
        basis = np.array([[5, 1], [1, 5]])
        result = blaster.lll_reduce(basis, verbose=False)
        print(f'[OK] Source installation test passed: RHF = {result.rhf:.6f}')
        "
    
    - name: Display artifacts
      shell: bash
      run: |
        echo "[ARTIFACTS] Built artifacts for ${{ matrix.test-os }}:"
        echo "Wheels:"
        find . -name "*.whl" -exec ls -lh {} \;
        if [[ "${{ matrix.test-os }}" == "ubuntu-latest" ]]; then
          echo "Source distributions:"
          find . -name "*.tar.gz" -exec ls -lh {} \;
        fi

  collect-artifacts:
    name: Collect All Artifacts
    needs: [test-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: wheels/
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: source-distribution/
    
    - name: Prepare artifacts for publishing
      run: |
        mkdir -p dist/
        cp wheels/*.whl dist/
        cp source-distribution/*.tar.gz dist/
        ls -la dist/
    
    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/*
        retention-days: 30

  publish-test-pypi:
    name: Publish to Test PyPI
    if: ${{ github.event.inputs.test_pypi == 'true' || (github.event_name == 'push' && contains(github.ref, 'alpha')) }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    environment: test-pypi
    
    steps:
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        verbose: true

  publish-pypi:
    name: Publish to PyPI
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && github.event.inputs.test_pypi != 'true' }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    name: Create GitHub Release
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: release-assets/
        # Create checksums
        cd release-assets/
        sha256sum * > checksums.txt
        cd ..
    
    - name: Extract release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > release_notes.md << EOF
        # BLASter $VERSION Release
        
        ## âœ¨ Features
        - Modern PEP 517/518 compliant packaging
        - Automatic Eigen3 dependency management
        - Comprehensive numpy-based Python interface
        - Cross-platform wheel distribution
        - Console script for command-line usage
        
        ## ðŸ”§ Installation
        \`\`\`bash
        pip install blaster
        \`\`\`
        
        ## [DOCS] Usage
        \`\`\`python
        import blaster
        import numpy as np
        
        # Your lattice basis as numpy array
        basis = np.array([[10, 2, 3], [1, 12, 4], [2, 1, 15]])
        
        # Perform LLL reduction
        result = blaster.lll_reduce(basis)
        print(f"Root Hermite Factor: {result.rhf:.6f}")
        \`\`\`
        
        ## [ARTIFACTS] Available Assets
        - Wheels for Linux (x86_64), macOS (x86_64, arm64), Windows (AMD64)
        - Source distribution for other platforms
        - All Python versions 3.10-3.13 supported
        
        See the [Interface Documentation](https://github.com/zhongcx/BLASter/blob/main/INTERFACE_README.md) for complete API reference.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: release_notes.md
        name: BLASter ${{ steps.release_notes.outputs.VERSION }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    name: Notification
    if: always()
    needs: [build-wheels, build-sdist, test-release, collect-artifacts]
    runs-on: ubuntu-latest
    
    steps:
    - name: Report status
      run: |
        echo "[STATUS] Release workflow completed!"
        echo "Build wheels status: ${{ needs.build-wheels.result }}"
        echo "Build sdist status: ${{ needs.build-sdist.result }}"
        echo "Test status: ${{ needs.test-release.result }}"
        echo "Collect artifacts status: ${{ needs.collect-artifacts.result }}"
        
        if [[ "${{ needs.build-wheels.result }}" == "success" && "${{ needs.build-sdist.result }}" == "success" && "${{ needs.test-release.result }}" == "success" && "${{ needs.collect-artifacts.result }}" == "success" ]]; then
          echo "[OK] All builds and tests passed!"
        else
          echo "[ERROR] Some builds or tests failed"
          exit 1
        fi