name: Build and Publish Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggers
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==3.1.4
    
    - name: Build wheels
      env:
        CIBW_BUILD: cp311-* cp312-* cp313-*
        CIBW_SKIP: "*-musllinux_*"  # Skip musl Linux for now due to potential build issues
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: AMD64
        # Install build dependencies only (Eigen3 is auto-downloaded by setup.py)
        CIBW_BEFORE_BUILD: pip install setuptools wheel Cython numpy mesonpy cysignals
        # Linux: Only install Python dependencies - no system packages needed
        CIBW_BEFORE_BUILD_LINUX: >
          pip install setuptools wheel Cython numpy mesonpy cysignals &&
          echo "Using automatic Eigen3 download - no system packages"
        # Install LLVM and OpenMP on macOS, and mesonpy for building cysignals from source
        CIBW_BEFORE_BUILD_MACOS: brew install llvm libomp && pip install setuptools wheel Cython numpy mesonpy cysignals
        # Skip built-in wheel testing - we do comprehensive testing in test-release job
        CIBW_TEST_SKIP: "*"
        # Environment variables for builds
        CIBW_ENVIRONMENT_LINUX: >
          CC=gcc 
          CXX=g++ 
          BLASTER_AUTO_EIGEN=1
          PIP_NO_BUILD_ISOLATION=false
        CIBW_ENVIRONMENT_MACOS: >
          CC=$(brew --prefix llvm)/bin/clang
          CXX=$(brew --prefix llvm)/bin/clang++
          MACOSX_DEPLOYMENT_TARGET=15.0
          BLASTER_AUTO_EIGEN=1
          PIP_NO_BUILD_ISOLATION=false
      run: python -m cibuildwheel --output-dir wheelhouse
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
        retention-days: 30

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build setuptools wheel Cython numpy cysignals
    
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 30

  test-release:
    name: Test Release Artifacts
    needs: [build-wheels, build-sdist]
    runs-on: ${{ matrix.test-os }}
    
    strategy:
      matrix:
        test-os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - test-os: ubuntu-latest
            wheel-pattern: "wheels-ubuntu-latest/*.whl"
          - test-os: macos-latest  
            wheel-pattern: "wheels-macos-latest/*.whl"
          - test-os: windows-latest
            wheel-pattern: "wheels-windows-latest/*.whl"
    
    steps:
    - name: Download platform-specific wheel artifacts
      uses: actions/download-artifact@v4
      with:
        name: wheels-${{ matrix.test-os }}
        path: wheels-${{ matrix.test-os }}/
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: source-distribution/
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Debug available artifacts
      shell: bash
      run: |
        echo "=== DEBUG: Current working directory ==="
        pwd
        echo ""
        echo "=== DEBUG: All downloaded files (recursive) ==="
        find . -type f -name "*.whl" -o -name "*.tar.gz" | sort
        echo ""
        echo "=== Directory structure ==="
        ls -la
        echo ""
        echo "=== Platform-specific wheels directory ==="
        ls -la wheels-${{ matrix.test-os }}/ 2>/dev/null || echo "wheels-${{ matrix.test-os }}/ directory not found"
        echo ""
        echo "=== Check for any dist/ directory ==="
        ls -la dist/ 2>/dev/null || echo "No dist/ directory found"
        echo ""
        echo "=== Artifact download verification ==="
        echo "Expected artifact name: wheels-${{ matrix.test-os }}"
        echo "Platform matrix: ${{ matrix.test-os }}"
    
    - name: Test wheel installation  
      shell: bash
      run: |
        echo "=== WHEEL INSTALLATION TEST FOR ${{ matrix.test-os }} ==="
        echo ""
        
        # Ensure we start clean
        echo "Cleaning any existing installations..."
        pip uninstall -y blaster 2>/dev/null || echo "No existing blaster installation"
        
        # Remove any existing temp directories or dist directories that might interfere
        rm -rf temp_wheels dist wheelhouse 2>/dev/null || true
        
        echo "Platform-specific wheels available:"
        ls -la wheels-${{ matrix.test-os }}/*.whl || { echo "ERROR: No wheels found in wheels-${{ matrix.test-os }}/"; exit 1; }
        
        echo ""
        echo "Python environment info:"
        python --version
        pip --version
        
        # Create completely isolated temp directory
        mkdir -p isolated_test_wheels
        cp wheels-${{ matrix.test-os }}/*.whl isolated_test_wheels/
        
        echo ""
        echo "Wheels copied to isolated directory:"
        ls -la isolated_test_wheels/
        
        echo ""
        echo "Installing blaster using platform-specific wheels..."
        python -m pip install --upgrade pip
        pip install "numpy>=1.20" cysignals matplotlib
        
        # Get the exact wheel file and install it directly
        WHEEL_FILE=$(ls isolated_test_wheels/*.whl | head -1)
        echo "Selected wheel file: $WHEEL_FILE"
        
        if [ ! -f "$WHEEL_FILE" ]; then
          echo "ERROR: Wheel file not found: $WHEEL_FILE"
          exit 1
        fi
        
        pip install "$WHEEL_FILE"
        
        echo ""
        echo "Testing the installed package..."
        python -c "
        import blaster
        import numpy as np
        basis = np.array([[10, 2], [3, 7]])
        result = blaster.lll_reduce(basis, verbose=False)
        print('[OK] Wheel installation test PASSED on ${{ matrix.test-os }}: RHF = ' + str(round(result.rhf, 6)))
        "
        
        echo ""
        echo "Cleaning up..."
        pip uninstall -y blaster
        rm -rf isolated_test_wheels
    
    - name: Test source distribution installation
      # Only test source distribution on one platform to avoid redundancy
      if: matrix.test-os == 'ubuntu-latest'
      shell: bash
      run: |
        pip install source-distribution/*.tar.gz
        python -c "
        import blaster
        import numpy as np
        basis = np.array([[5, 1], [1, 5]])
        result = blaster.lll_reduce(basis, verbose=False)
        print('[OK] Source installation test passed: RHF = ' + str(round(result.rhf, 6)))
        "
    
    - name: Display artifacts
      shell: bash
      run: |
        echo "[ARTIFACTS] Built artifacts for ${{ matrix.test-os }}:"
        echo "Wheels:"
        find . -name "*.whl" -exec ls -lh {} \;
        if [[ "${{ matrix.test-os }}" == "ubuntu-latest" ]]; then
          echo "Source distributions:"
          find . -name "*.tar.gz" -exec ls -lh {} \;
        fi

  collect-artifacts:
    name: Collect All Artifacts
    needs: [test-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: wheels/
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: source-distribution/
    
    - name: Prepare artifacts for publishing
      run: |
        mkdir -p dist/
        cp wheels/*.whl dist/
        cp source-distribution/*.tar.gz dist/
        ls -la dist/
    
    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/*
        retention-days: 30

  publish-test-pypi:
    name: Publish to Test PyPI
    if: ${{ github.event.inputs.test_pypi == 'true' || (github.event_name == 'push' && contains(github.ref, 'alpha')) }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    environment: test-pypi
    
    steps:
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        verbose: true

  publish-pypi:
    name: Publish to PyPI
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && github.event.inputs.test_pypi != 'true' }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.10.3
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    name: Create GitHub Release
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download collected artifacts
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: release-assets/
    
    - name: Create checksums
      run: |
        cd release-assets/
        sha256sum * > checksums.txt
        cd ..
    
    - name: Extract release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > release_notes.md << EOF
        # BLASter $VERSION Release
        
        ## ✨ Features
        - Modern PEP 517/518 compliant packaging
        - Automatic Eigen3 dependency management
        - Comprehensive numpy-based Python interface
        - Cross-platform wheel distribution
        - Console script for command-line usage
        
        ## 🔧 Installation
        \`\`\`bash
        pip install blaster
        \`\`\`
        
        ## [DOCS] Usage
        \`\`\`python
        import blaster
        import numpy as np
        
        # Your lattice basis as numpy array
        basis = np.array([[10, 2, 3], [1, 12, 4], [2, 1, 15]])
        
        # Perform LLL reduction
        result = blaster.lll_reduce(basis)
        print("Root Hermite Factor: " + str(round(result.rhf, 6)))
        \`\`\`
        
        ## [ARTIFACTS] Available Assets
        - Wheels for Linux (x86_64), macOS (x86_64, arm64), Windows (AMD64)
        - Source distribution for other platforms
        - All Python versions 3.11-3.13 supported
        
        See the [Interface Documentation](https://github.com/zhongcx/BLASter/blob/main/INTERFACE_README.md) for complete API reference.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: release_notes.md
        name: BLASter ${{ steps.release_notes.outputs.VERSION }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    name: Notification
    if: always()
    needs: [build-wheels, build-sdist, test-release, collect-artifacts]
    runs-on: ubuntu-latest
    
    steps:
    - name: Report status
      run: |
        echo "[STATUS] Release workflow completed!"
        echo "Build wheels status: ${{ needs.build-wheels.result }}"
        echo "Build sdist status: ${{ needs.build-sdist.result }}"
        echo "Test status: ${{ needs.test-release.result }}"
        echo "Collect artifacts status: ${{ needs.collect-artifacts.result }}"
        
        if [[ "${{ needs.build-wheels.result }}" == "success" && "${{ needs.build-sdist.result }}" == "success" && "${{ needs.test-release.result }}" == "success" && "${{ needs.collect-artifacts.result }}" == "success" ]]; then
          echo "[OK] All builds and tests passed!"
        else
          echo "[ERROR] Some builds or tests failed"
          exit 1
        fi